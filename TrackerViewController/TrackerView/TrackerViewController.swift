import UIKit

final class TrackerViewController: UIViewController {
    // MARK: - UI Elements
    private let addTrackerButton: UIButton = {
        let button = UIButton.systemButton(
            with: UIImage(named: "add_tracker_icon") ?? UIImage(),
            target: nil,
            action: nil
        )
        button.tintColor = .blackDayYp
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(addTrackerButtonTapped), for: .touchUpInside)
        return button
    }()
    
    private let trackerLabel: UILabel = {
        let label = UILabel()
        label.text = "–¢—Ä–µ–∫–µ—Ä—ã"
        label.font = .systemFont(ofSize: 34, weight: .bold)
        label.tintColor = .blackDayYp
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let datePicker: UIDatePicker = {
        let picker = UIDatePicker()
        picker.datePickerMode = .date
        picker.preferredDatePickerStyle = .compact
        picker.backgroundColor = .backgroundDayYp
        picker.layer.cornerRadius = 8
        picker.layer.masksToBounds = true
        picker.translatesAutoresizingMaskIntoConstraints = false
        picker.addTarget(self, action: #selector(datePickerValueChanged(_:)), for: .valueChanged)
        return picker
    }()
    
    private let trackerSearchBar: UISearchBar = {
        let searchBar = UISearchBar()
        searchBar.placeholder = "–ü–æ–∏—Å–∫"
        searchBar.searchBarStyle = .minimal
        searchBar.layer.cornerRadius = 8
        searchBar.layer.masksToBounds = true
        searchBar.translatesAutoresizingMaskIntoConstraints = false
        return searchBar
    }()
    
    // –ó–∞–≥–ª—É—à–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç—Ä–µ–∫–µ—Ä–æ–≤
    private let emptyPlaceholderImageView: UIImageView = {
        let imageView = UIImageView(image: UIImage(named: "ill_error_image"))
        imageView.contentMode = .scaleAspectFit
        imageView.translatesAutoresizingMaskIntoConstraints = false
        return imageView
    }()
    
    private let emptyPlaceholderLabel: UILabel = {
        let label = UILabel()
        label.text = "–ß—Ç–æ –±—É–¥–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å?"
        label.textAlignment = .center
        label.font = .systemFont(ofSize: 12)
        label.tintColor = .blackDayYp
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    // –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤
    private let collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.minimumLineSpacing = 16
        layout.minimumInteritemSpacing = 16
        layout.scrollDirection = .vertical
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        return collectionView
    }()
    
    var categories: [TrackerCategory] = [
        TrackerCategory(title: "–ì—Ä—É–ø–ø–∞ 1", trackers: [
            Tracker(id: UUID(), title: "–ü–æ–µ—Å—Ç—å –∫—É—Ä–∏—Ü—É", color: .systemBlue, emoji: "üå∏", schedule: ["Monday"]),
            Tracker(id: UUID(), title: "–ù–µ –∑–∞–±—ã—Ç—å —Å—å–µ–∑–¥–∏—Ç—å –Ω–∞ –ø–∞—Ä—ã", color: .systemRed, emoji: "‚ù§Ô∏è", schedule: ["Tuesday"]),
        ]),
        TrackerCategory(title: "–ì—Ä—É–ø–ø–∞ 2", trackers: [
            Tracker(id: UUID(), title: "–ü–æ—Ü–µ–ª–æ–≤–∞—Ç—å —Å–æ–±–∞–∫—É –∏ –∫–æ—Ç–∞ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º", color: .systemGreen, emoji: "üê∂", schedule: ["Wednesday"])
        ])
    ]
    
    // MARK: - Data
    private var filteredCategories: [TrackerCategory] = []
    var trackerRecords: [TrackerRecord] = []
    var completedTrackers: Set<UUID> = []
    var currentDate: Date = Date()

    // MARK: - Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        
        NotificationCenter.default.addObserver(self, selector: #selector(didReceiveNewTrackerNotification(_:)), name: .didCreateNewTracker, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(toggleTrackerCompletion(_:)), name: .didToggleTrackerCompletion, object: nil)
        
        filterTrackers(for: getWeekday(from: Date()))
        setupTrackerView()
        updateUI()
        setupCollectionView()
    }
    
    // MARK: - Setup UI
    private func setupTrackerView() {
        view.addSubview(addTrackerButton)
        view.addSubview(trackerLabel)
        view.addSubview(datePicker)
        view.addSubview(trackerSearchBar)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –∏ CollectionView
        view.addSubview(emptyPlaceholderImageView)
        view.addSubview(emptyPlaceholderLabel)
        view.addSubview(collectionView)
        
        setupConstraints()
    }
    
    private func setupConstraints() {
        NSLayoutConstraint.activate([
            // –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
            addTrackerButton.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 6),
            addTrackerButton.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),
            addTrackerButton.heightAnchor.constraint(equalToConstant: 42),
            addTrackerButton.widthAnchor.constraint(equalToConstant: 42),
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–µ–∫–µ—Ä–æ–≤
            trackerLabel.topAnchor.constraint(equalTo: addTrackerButton.bottomAnchor),
            trackerLabel.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
            trackerLabel.heightAnchor.constraint(equalToConstant: 41),
            
            // –î–∞—Ç–∞ –ø–∏–∫–µ—Ä
            datePicker.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
            datePicker.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 5),
            datePicker.heightAnchor.constraint(equalToConstant: 34),
            datePicker.widthAnchor.constraint(equalToConstant: 100),
            
            // –ü–æ–∏—Å–∫–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            trackerSearchBar.topAnchor.constraint(equalTo: trackerLabel.bottomAnchor, constant: 7),
            trackerSearchBar.leadingAnchor.constraint(equalTo: trackerLabel.leadingAnchor),
            trackerSearchBar.trailingAnchor.constraint(equalTo: datePicker.trailingAnchor),
            trackerSearchBar.heightAnchor.constraint(equalToConstant: 36),
            
            // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∏
            emptyPlaceholderImageView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
            emptyPlaceholderImageView.topAnchor.constraint(equalTo: trackerSearchBar.bottomAnchor, constant: 220),
            emptyPlaceholderImageView.heightAnchor.constraint(equalToConstant: 80),
            emptyPlaceholderImageView.widthAnchor.constraint(equalToConstant: 80),
            
            // –¢–µ–∫—Å—Ç –∑–∞–≥–ª—É—à–∫–∏
            emptyPlaceholderLabel.topAnchor.constraint(equalTo: emptyPlaceholderImageView.bottomAnchor, constant: 8),
            emptyPlaceholderLabel.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor),
            emptyPlaceholderLabel.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 16),
            emptyPlaceholderLabel.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -16),
            
            // –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–æ–≤
            collectionView.topAnchor.constraint(equalTo: trackerSearchBar.bottomAnchor, constant: 20),
            collectionView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 0),
            collectionView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: 0),
            collectionView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor)
        ])
    }
    
    // MARK: - UI Update Logic
    private func updateUI() {
        let hasTrackers = !filteredCategories.isEmpty
        collectionView.isHidden = !hasTrackers
        emptyPlaceholderLabel.isHidden = hasTrackers
        emptyPlaceholderImageView.isHidden = hasTrackers
        
        if hasTrackers {
            collectionView.reloadData()
        }
    }
    // MARK: - Filter Method
    
    private func filterTrackers(for weekday: String) {
        filteredCategories = categories.map { category in
            let filteredTrackers = category.trackers.filter { $0.schedule.contains(weekday) }
            return TrackerCategory(title: category.title, trackers: filteredTrackers)
        }.filter { !$0.trackers.isEmpty }
        
        print("Filtered trackers for \(weekday): \(filteredCategories)")
        updateUI()
    }

    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    private func getWeekday(from date: Date) -> String {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "EEEE"
        dateFormatter.locale = Locale(identifier: "en_US")
        return dateFormatter.string(from: date)
    }

    
    // MARK: - Actions
    
    @objc private func didReceiveNewTrackerNotification(_ notification: Notification) {
        guard let newTracker = notification.object as? Tracker else { return }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        var updatedCategories: [TrackerCategory] = []
        
        var trackerAdded = false
        
        // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for category in categories {
            if category.title == "–ù—É–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è" { // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —É—Å–ª–æ–≤–∏–µ –≤—ã–±–æ—Ä–∞ –Ω—É–∂–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä –≤ –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                var updatedTrackers = category.trackers
                updatedTrackers.append(newTracker)
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º —Ç—Ä–µ–∫–µ—Ä–æ–≤
                let updatedCategory = TrackerCategory(title: category.title, trackers: updatedTrackers)
                updatedCategories.append(updatedCategory)
                trackerAdded = true
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
                updatedCategories.append(category)
            }
        }
        
        // –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        if !trackerAdded {
            let newCategory = TrackerCategory(title: "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", trackers: [newTracker])
            updatedCategories.append(newCategory)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º categories –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = updatedCategories
        updateUI()
    }
    
    @objc private func toggleTrackerCompletion(_ notification: Notification) {
        guard let trackerID = notification.object as? UUID else { return }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —Ç—Ä–µ–∫–µ—Ä
        if completedTrackers.contains(trackerID) {
            completedTrackers.remove(trackerID)
            removeCompletionRecord(for: trackerID)
        } else {
            completedTrackers.insert(trackerID)
            addCompletionRecord(for: trackerID)
        }
        
        collectionView.reloadData()
    }
    
    @objc private func datePickerValueChanged(_ sender: UIDatePicker) {
        let selectedDate = sender.date
        let dateFormatter = DateFormatter()
        let selectedWeekday = getWeekday(from: selectedDate)
            filterTrackers(for: selectedWeekday)
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—á–Ω—É—é –ª–æ–∫–∞–ª—å –∏ —Ñ–æ—Ä–º–∞—Ç
        dateFormatter.locale = Locale(identifier: "ru_RU") // –õ–æ–∫–∞–ª—å "ru_RU" –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞
        dateFormatter.dateFormat = "dd.MM.yy" // –¢–æ—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ —Å –¥–≤—É–º—è —Ü–∏—Ñ—Ä–∞–º–∏ –≥–æ–¥–∞

        let formattedDate = dateFormatter.string(from: selectedDate)
        print("–í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: \(formattedDate)")
    }

    @objc private func addTrackerButtonTapped() {
        let trackerCreateVC = TrackerCreateViewController()
        if let navigationController = self.navigationController {
            navigationController.pushViewController(trackerCreateVC, animated: true)
        } else {
            trackerCreateVC.modalPresentationStyle = .pageSheet
            present(trackerCreateVC, animated: true, completion: nil)
        }
    }
    private func setupCollectionView() {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —è—á–µ–π–∫—É –∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
        collectionView.register(TrackerCollectionViewCell.self, forCellWithReuseIdentifier: TrackerCollectionViewCell.identifier)
        collectionView.register(TrackerCategoryHeaderView.self, forSupplementaryViewOfKind: UICollectionView.elementKindSectionHeader, withReuseIdentifier: TrackerCategoryHeaderView.identifier)
        
        collectionView.dataSource = self
        collectionView.delegate = self
    }
    
    private func addCompletionRecord(for trackerID: UUID) {
        let record = TrackerRecord(trackerID: trackerID, date: currentDate)
        completedTrackers.insert(trackerID)
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    }
    
    private func removeCompletionRecord(for trackerID: UUID) {
        completedTrackers.remove(trackerID)
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    }
    
    func completedDaysCount(for trackerID: UUID) -> Int {
        return trackerRecords.filter { $0.trackerID == trackerID }.count
    }
}

// MARK: - UICollectionViewDataSource
extension TrackerViewController: UICollectionViewDataSource {
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return filteredCategories.count
    }

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return filteredCategories[section].trackers.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: TrackerCollectionViewCell.identifier, for: indexPath) as! TrackerCollectionViewCell
        
        let tracker = filteredCategories[indexPath.section].trackers[indexPath.row]
        let isCompleted = completedTrackers.contains(tracker.id)
        let daysCompleted = completedDaysCount(for: tracker.id)
        
        cell.configure(with: tracker, isCompleted: isCompleted, daysCompleted: daysCompleted)
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, viewForSupplementaryElementOfKind kind: String, at indexPath: IndexPath) -> UICollectionReusableView {
        if kind == UICollectionView.elementKindSectionHeader {
            let header = collectionView.dequeueReusableSupplementaryView(ofKind: kind, withReuseIdentifier: TrackerCategoryHeaderView.identifier, for: indexPath) as! TrackerCategoryHeaderView
            let category = categories[indexPath.section]
            header.configure(with: category.title) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
            return header
        }
        return UICollectionReusableView()
    }
}

// MARK: - UICollectionViewDelegateFlowLayout
extension TrackerViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let padding: CGFloat = 16 + 9 // –û—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏ –∏ –∫—Ä–∞—è–º–∏ —ç–∫—Ä–∞–Ω–∞
        let availableWidth = collectionView.bounds.width - padding
        let cellWidth = availableWidth / 2 - 8 // 8 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –æ—Ç—Å—Ç—É–ø–∞ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
        
        return CGSize(width: cellWidth, height: 120)
    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, referenceSizeForHeaderInSection section: Int) -> CGSize {
        return CGSize(width: collectionView.bounds.width, height: 40) // –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ–∫—Ü–∏–∏
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        return UIEdgeInsets(top: 12, left: 16, bottom: 12, right: 16) // –û—Ç—Å—Ç—É–ø—ã –æ—Ç –∫—Ä–∞–µ–≤ —ç–∫—Ä–∞–Ω–∞
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 12 // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ —è—á–µ–µ–∫
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 9 // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    }
}

extension Notification.Name {
    static let didCreateNewTracker = Notification.Name("didCreateNewTracker")
}


