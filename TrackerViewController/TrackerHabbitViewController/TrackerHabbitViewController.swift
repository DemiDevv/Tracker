import UIKit

class TrackerHabbitViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {
    
    // MARK: - UI Elements
    private let habbitTitle: UILabel = {
        let label = UILabel()
        label.text = "–ù–æ–≤–∞—è –ø—Ä–∏–≤—ã—á–∫–∞"
        label.font = .systemFont(ofSize: 16)
        label.tintColor = .black
        label.translatesAutoresizingMaskIntoConstraints = false
        return label
    }()
    
    private let titleTextField: UITextField = {
        let textField = UITextField()
        textField.placeholder = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"
        textField.borderStyle = .none
        textField.backgroundColor = .backgroundDayYp
        textField.layer.cornerRadius = 16
        textField.layer.masksToBounds = true
        let paddingView = UIView(frame: CGRect(x: 0, y: 0, width: 16, height: textField.frame.height))
        textField.leftView = paddingView
        textField.leftViewMode = .always
        textField.translatesAutoresizingMaskIntoConstraints = false
        textField.addTarget(self, action: #selector(textFieldDidChange), for: .editingChanged)
        return textField
    }()
    
    
    private let optionsTableView: UITableView = {
        let tableView = UITableView(frame: .zero, style: .plain)
        tableView.isScrollEnabled = false
        tableView.layer.cornerRadius = 16
        tableView.layer.masksToBounds = true  // –ó–∞–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
        tableView.translatesAutoresizingMaskIntoConstraints = false
        tableView.backgroundColor = .clear
        tableView.separatorInset = .zero  // –£–±–∏—Ä–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        tableView.separatorColor = .lightGray  // –¶–≤–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        return tableView
    }()
    
    
    
    private let emojiLabel: UILabel = {
        let emojiLabel = UILabel()
        emojiLabel.text = "Emoji"
        emojiLabel.font = UIFont.systemFont(ofSize: 16, weight: .bold)
        emojiLabel.translatesAutoresizingMaskIntoConstraints = false
        return emojiLabel
        
    }()
    
    private let colorLabel: UILabel = {
        let emojiLabel = UILabel()
        emojiLabel.text = "–¶–≤–µ—Ç"
        emojiLabel.font = UIFont.systemFont(ofSize: 16, weight: .bold)
        emojiLabel.translatesAutoresizingMaskIntoConstraints = false
        return emojiLabel
        
    }()
    
    private let emojiCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.register(TrackerHabbitViewCell.self, forCellWithReuseIdentifier: "EmojiCell")
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.isScrollEnabled = false
        return collectionView
    }()
    
    private let colorCollectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)
        collectionView.register(TrackerHabbitViewCell.self, forCellWithReuseIdentifier: "ColorCell")
        collectionView.translatesAutoresizingMaskIntoConstraints = false
        collectionView.isScrollEnabled = false
        return collectionView
    }()
    
    
    private let buttonContainerView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    // –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å"
    private let createButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–°–æ–∑–¥–∞—Ç—å", for: .normal)
        button.backgroundColor = .systemGray
        button.setTitleColor(.white, for: .normal)
        button.layer.cornerRadius = 12
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(didTapCreateButton), for: .touchUpInside)
        return button
    }()
    
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å"
    private let cancelButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("–û—Ç–º–µ–Ω–∏—Ç—å", for: .normal)
        button.setTitleColor(.systemRed, for: .normal)
        button.layer.borderWidth = 1
        button.layer.borderColor = UIColor.systemRed.cgColor
        button.layer.cornerRadius = 12
        button.translatesAutoresizingMaskIntoConstraints = false
        button.addTarget(self, action: #selector(didTapCancelButton), for: .touchUpInside)
        return button
    }()

    private let scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        return scrollView
    }()

    private let scrollContentView: UIView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        return view
    }()
    
    private let emojis = ["üòÄ", "üò∫", "üå∏", "üê∂", "‚ù§Ô∏è", "üò±", "üòá", "üò°", "ü§î", "ü•á", "üé∏", "üçî", "üò∫", "üå∏", "üê∂", "‚ù§Ô∏è", "üò±", "üòá"]
    private let colors: [UIColor] = [
        .colorSelection1, .colorSelection2, .colorSelection3, .colorSelection4, .colorSelection5, .colorSelection6, .colorSelection7, .colorSelection8, .colorSelection9, .colorSelection10, .colorSelection11, .colorSelection12, .colorSelection13, .colorSelection14, .colorSelection15, .colorSelection16, .colorSelection17, .colorSelection18
    ]
    
    private var selectedEmoji: String?
    private var selectedColor: UIColor?
    private var selectedSchedule = [Weekday]()
    weak var delegate: ScheduleViewControllerDelegate?
    
    var onTrackerCreated: ((Tracker) -> Void)?
    
    // MARK: - View Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        
        optionsTableView.dataSource = self
        optionsTableView.delegate = self
        optionsTableView.register(UITableViewCell.self, forCellReuseIdentifier: "optionCell")
        optionsTableView.tableFooterView = UIView()
        
        setupViews()
        
        emojiCollectionView.heightAnchor.constraint(greaterThanOrEqualToConstant: 0).isActive = true
        colorCollectionView.heightAnchor.constraint(greaterThanOrEqualToConstant: 0).isActive = true

        updateCollectionViewHeights()
        
    }

    
    @objc private func textFieldDidChange() {
        if let text = titleTextField.text, !text.isEmpty {
            createButton.isEnabled = true
            createButton.backgroundColor = .blackDayYp
        } else {
            createButton.isEnabled = false
            createButton.backgroundColor = .grayYp
        }
    }
    
    @objc private func didTapCancelButton() {
        presentingViewController?.dismiss(animated: true, completion: nil)
    }
    
    @objc private func didTapCreateButton() {
        guard let title = titleTextField.text, !title.isEmpty,
              let color = selectedColor,
              let emoji = selectedEmoji, !selectedSchedule.isEmpty
        else {
            return
        }
        
        let newTracker = Tracker(id: UUID(), title: title, color: color, emoji: emoji, schedule: selectedSchedule, type: .habbit)
        
        NotificationCenter.default.post(name: .didCreateNewTracker, object: newTracker)
        presentingViewController?.presentingViewController?.dismiss(animated: true, completion: nil)
    }

    func updateCollectionViewHeights() {
        let itemHeight: CGFloat = 52 // –í—ã—Å–æ—Ç–∞ –æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
        let itemsPerRow: CGFloat = 6 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
        let interItemSpacing: CGFloat = 5 // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        let emojiRows = ceil(CGFloat(emojis.count) / itemsPerRow)
        let colorRows = ceil(CGFloat(colors.count) / itemsPerRow)
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –≤—ã—Å–æ—Ç—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        let emojiHeight = emojiRows * itemHeight + max(emojiRows - 1, 0) * interItemSpacing
        let colorHeight = colorRows * itemHeight + max(colorRows - 1, 0) * interItemSpacing
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—ã
        emojiCollectionView.heightAnchor.constraint(equalToConstant: emojiHeight).isActive = true
        colorCollectionView.heightAnchor.constraint(equalToConstant: colorHeight).isActive = true
    }
    
    private func presentScheduleViewController() {
        let scheduleVC = ScheduleViewController()
        scheduleVC.delegate = self
        present(scheduleVC, animated: true, completion: nil)
    }
    
    private func selectedScheduleString() -> String {
        guard !selectedSchedule.isEmpty else { return "" }
        
        let weekdayShortNames: [Weekday: String] = [
            .monday: "–ü–Ω",
            .tuesday: "–í—Ç",
            .wednesday: "–°—Ä",
            .thursday: "–ß—Ç",
            .friday: "–ü—Ç",
            .saturday: "–°–±",
            .sunday: "–í—Å"
        ]
        
        let shortNames = selectedSchedule.compactMap { weekdayShortNames[$0] }
        return shortNames.joined(separator: ", ")
    }

    private func setupViews() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π view
        view.addSubview(habbitTitle)
        view.addSubview(titleTextField)
        view.addSubview(optionsTableView)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º scrollView –¥–ª—è —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–æ–π —á–∞—Å—Ç–∏
        view.addSubview(scrollView)
        scrollView.addSubview(scrollContentView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ scrollContentView (—Ç–æ–ª—å–∫–æ —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã–µ —á–∞—Å—Ç–∏)
        scrollContentView.addSubview(emojiLabel)
        scrollContentView.addSubview(emojiCollectionView)
        scrollContentView.addSubview(colorLabel)
        scrollContentView.addSubview(colorCollectionView)
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π view
        view.addSubview(buttonContainerView)
        buttonContainerView.addSubview(cancelButton)
        buttonContainerView.addSubview(createButton)
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        NSLayoutConstraint.activate([
            habbitTitle.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 16),
            habbitTitle.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            
            titleTextField.topAnchor.constraint(equalTo: habbitTitle.bottomAnchor, constant: 24),
            titleTextField.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            titleTextField.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            titleTextField.heightAnchor.constraint(equalToConstant: 75),
            
            optionsTableView.topAnchor.constraint(equalTo: titleTextField.bottomAnchor, constant: 24),
            optionsTableView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            optionsTableView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            optionsTableView.heightAnchor.constraint(equalToConstant: 150)
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è scrollView
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: optionsTableView.bottomAnchor, constant: 16),
            scrollView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: buttonContainerView.topAnchor)
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è scrollContentView
        NSLayoutConstraint.activate([
            scrollContentView.topAnchor.constraint(equalTo: scrollView.topAnchor),
            scrollContentView.leadingAnchor.constraint(equalTo: scrollView.leadingAnchor),
            scrollContentView.trailingAnchor.constraint(equalTo: scrollView.trailingAnchor),
            scrollContentView.bottomAnchor.constraint(equalTo: scrollView.bottomAnchor),
            scrollContentView.widthAnchor.constraint(equalTo: scrollView.widthAnchor) // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Å–∫—Ä–æ–ª–ª–∏–Ω–≥
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        NSLayoutConstraint.activate([
            emojiLabel.topAnchor.constraint(equalTo: scrollContentView.topAnchor, constant: 16),  // –û—Ç—Å—Ç—É–ø 16
            emojiLabel.leadingAnchor.constraint(equalTo: scrollContentView.leadingAnchor, constant: 28),
            emojiLabel.heightAnchor.constraint(equalToConstant: 18),
            
            emojiCollectionView.topAnchor.constraint(equalTo: emojiLabel.bottomAnchor, constant: 8),
            emojiCollectionView.leadingAnchor.constraint(equalTo: scrollContentView.leadingAnchor, constant: 16),
            emojiCollectionView.trailingAnchor.constraint(equalTo: scrollContentView.trailingAnchor, constant: -16),
            
            colorLabel.topAnchor.constraint(equalTo: emojiCollectionView.bottomAnchor, constant: 16),  // –û—Ç—Å—Ç—É–ø 16
            colorLabel.leadingAnchor.constraint(equalTo: scrollContentView.leadingAnchor, constant: 28),
            colorLabel.heightAnchor.constraint(equalToConstant: 18),
            
            colorCollectionView.topAnchor.constraint(equalTo: colorLabel.bottomAnchor, constant: 8),
            colorCollectionView.leadingAnchor.constraint(equalTo: scrollContentView.leadingAnchor, constant: 16),
            colorCollectionView.trailingAnchor.constraint(equalTo: scrollContentView.trailingAnchor, constant: -16),
            colorCollectionView.bottomAnchor.constraint(equalTo: scrollContentView.bottomAnchor, constant: -16)
        ])
        
        // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
        NSLayoutConstraint.activate([
            // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è `buttonContainerView`
            buttonContainerView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            buttonContainerView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            buttonContainerView.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor, constant: -16),
            buttonContainerView.heightAnchor.constraint(equalToConstant: 66), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –Ω–∞ 16 (50 + 16)
            
            // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è `cancelButton`
            cancelButton.leadingAnchor.constraint(equalTo: buttonContainerView.leadingAnchor),
            cancelButton.topAnchor.constraint(equalTo: buttonContainerView.topAnchor, constant: 16), // –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            cancelButton.bottomAnchor.constraint(equalTo: buttonContainerView.bottomAnchor),
            cancelButton.trailingAnchor.constraint(equalTo: createButton.leadingAnchor, constant: -16),
            cancelButton.widthAnchor.constraint(equalTo: createButton.widthAnchor),
            
            // –ö–æ–Ω—Å—Ç—Ä–µ–π–Ω—Ç—ã –¥–ª—è `createButton`
            createButton.trailingAnchor.constraint(equalTo: buttonContainerView.trailingAnchor),
            createButton.topAnchor.constraint(equalTo: buttonContainerView.topAnchor, constant: 16), // –û—Ç—Å—Ç—É–ø –æ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫—Ä–∞—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            createButton.bottomAnchor.constraint(equalTo: buttonContainerView.bottomAnchor)
        ])
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–ª–µ–≥–∞—Ç–æ–≤ –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        emojiCollectionView.dataSource = self
        emojiCollectionView.delegate = self
        colorCollectionView.dataSource = self
        colorCollectionView.delegate = self
        
        emojiCollectionView.allowsMultipleSelection = false
        colorCollectionView.allowsMultipleSelection = false
    }


    
    // MARK: - UITableViewDataSource
    
    
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 2 // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 75 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —è—á–µ–π–∫–∏
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell(style: .subtitle, reuseIdentifier: "optionCell")

        if indexPath.row == 0 {
            cell.textLabel?.text = "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"
            cell.detailTextLabel?.text = "–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è"
            cell.detailTextLabel?.font = UIFont.systemFont(ofSize: 17)
            cell.detailTextLabel?.textColor = .grayYp
        } else if indexPath.row == 1 {
            cell.textLabel?.text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"
            cell.detailTextLabel?.text = selectedScheduleString()
            print("\(selectedScheduleString())")
            cell.detailTextLabel?.font = UIFont.systemFont(ofSize: 17)
            cell.detailTextLabel?.textColor = .grayYp
        }

        cell.accessoryType = .disclosureIndicator
        cell.backgroundColor = .backgroundDayYp
        return cell
    }



    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row == tableView.numberOfRows(inSection: indexPath.section) - 1 {
            // –£–±–∏—Ä–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–∏
            cell.separatorInset = UIEdgeInsets(top: 0, left: 0, bottom: 0, right: .greatestFiniteMagnitude)
        } else {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —è—á–µ–µ–∫
            cell.separatorInset = UIEdgeInsets(top: 0, left: 16, bottom: 0, right: 16)
        }
    }
    
    
    
    // MARK: - UITableViewDelegate
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        
        if indexPath.row == 1 {
            titleTextField.resignFirstResponder()
            presentScheduleViewController()
        }
    }
    
    // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å–µ–∫—Ü–∏—è–º–∏ –∏ —è—á–µ–π–∫–∞–º–∏
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 0 // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –ø–µ—Ä–µ–¥ —Å–µ–∫—Ü–∏–µ–π
    }
    
    func tableView(_ tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {
        return 0 // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –ø–æ—Å–ª–µ —Å–µ–∫—Ü–∏–∏
    }
    
    // –£–±–∏—Ä–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
    func tableView(_ tableView: UITableView, layoutMarginsForItemAt indexPath: IndexPath) -> UIEdgeInsets {
        return UIEdgeInsets.zero // –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
    }
    
}


extension TrackerHabbitViewController: UICollectionViewDataSource {
    func collectionView(
        _ collectionView: UICollectionView,
        numberOfItemsInSection section: Int
    ) -> Int {
        if collectionView == emojiCollectionView {
            return emojis.count
        } else if collectionView == colorCollectionView {
            return colors.count
        }
        return 0
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        cellForItemAt indexPath: IndexPath
    ) -> UICollectionViewCell {
        if collectionView == emojiCollectionView {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "EmojiCell", for: indexPath) as? TrackerHabbitViewCell else {
                return UICollectionViewCell()
            }
            cell.titleLabel.text = emojis[indexPath.row]
            cell.colorView.isHidden = true // –°–∫—Ä—ã–≤–∞–µ–º colorView –¥–ª—è Emoji —è—á–µ–π–∫–∏
            return cell
        } else if collectionView == colorCollectionView {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "ColorCell", for: indexPath) as? TrackerHabbitViewCell else {
                return UICollectionViewCell()
            }
            cell.innerColorView.backgroundColor = colors[indexPath.row]
            cell.titleLabel.isHidden = true // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é –º–µ—Ç–∫—É –¥–ª—è Color —è—á–µ–π–∫–∏
            cell.colorView.isHidden = false
            return cell
        }
        return UICollectionViewCell()
    }
}

extension TrackerHabbitViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        guard let cell = collectionView.cellForItem(at: indexPath) as? TrackerHabbitViewCell else { return }
        
        cell.titleLabel.backgroundColor = .lightGrayYp
        
        if collectionView == emojiCollectionView {
            selectedEmoji = emojis[indexPath.row]
        } else if collectionView == colorCollectionView {
            selectedColor = colors[indexPath.row]
            cell.colorView.layer.borderColor = selectedColor?.withAlphaComponent(0.3).cgColor
        }
    }
    
    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
        let cell = collectionView.cellForItem(at: indexPath) as? TrackerHabbitViewCell
        cell?.titleLabel.backgroundColor = .white
        cell?.colorView.layer.borderColor = UIColor.white.cgColor
    }
}

extension TrackerHabbitViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        sizeForItemAt indexPath: IndexPath
    ) -> CGSize {
        let itemsPerRow: CGFloat = 6
        let interItemSpacing: CGFloat = 5
        let edgeInsets: CGFloat = 16
        let totalSpacing = interItemSpacing * (itemsPerRow - 1)
        let availableWidth = collectionView.bounds.width - edgeInsets * 2 - totalSpacing
        let widthPerItem = availableWidth / itemsPerRow
        return CGSize(width: widthPerItem, height: widthPerItem)
    }

    
    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        minimumInteritemSpacingForSectionAt section: Int
    ) -> CGFloat {
        return 5// –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç–æ–ª–±—Ü–∞–º–∏
    }

    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        minimumLineSpacingForSectionAt section: Int
    ) -> CGFloat {
        return 0 // –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏
    }
    
    func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout,
        insetForSectionAt section: Int
    ) -> UIEdgeInsets {
        return UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0) // –û—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    }
}

extension TrackerHabbitViewController: ScheduleViewControllerDelegate {
    func didSelectSchedule(_ selectedDays: [Weekday]) {
        print("Selected days: \(selectedDays)")  // –ü–µ—á–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        selectedSchedule = selectedDays
        optionsTableView.reloadData()
    }
}
